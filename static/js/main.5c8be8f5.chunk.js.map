{"version":3,"sources":["components/Header/Header.js","components/Flower/Flower.js","components/Container/Container.js","components/Col/Col.js","components/Row/Row.js","components/Footer/Footer.js","components/Alert/Alert.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","statement","score","topScore","Flower","value","id","onClick","handleOnClick","alt","src","image","Constainer","Object","assign","concat","fluid","Col","size","split","map","join","Row","Footer","Alert","role","type","style","objectSpread","width","margin","marginTop","App","state","flowers","clicked","_this","includes","setState","sort","b","Math","random","updatedScore","_this2","this","components_Header_Header","Container","components_Row_Row","components_Col_Col","key","components_Flower_Flower","components_Alert_Alert","opacity","marginBottom","textAlign","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c8be8f5.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = props => (\n    <nav>\n        <ul>\n            <li>\n                <a className = \"navbar-brand\" href = \"/\"><h2>Flowers Memory Game</h2></a>\n            </li>\n            <li>\n                { props.statement }\n            </li>\n            <li>\n                <h2>Score: { props.score } | Top Score: { props.topScore }</h2>\n            </li>\n        </ul>\n    </nav>\n);\n\nexport default Header;","import React from 'react';\nimport './Flower.css';\n\nconst Flower = props => (\n    <div    \n        className = \"card\"\n        value = {props.id}\n        onClick = { () => {props.handleOnClick(props.id)}}>\n            <div className = \"img-container\">\n                <img alt = \"\" src = {props.image} />\n            </div>\n    </div>\n);\n\nexport default Flower;","import React from \"react\";\n\nconst Constainer = props =>\n    <div className = { `container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n\nexport default Constainer;","import React from \"react\";\n\nconst Col = props => {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n  return <div className = {size} {...props} />;\n};\n\nexport default Col;","import React from \"react\";\n\nconst Row = props =>\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n\nexport default Row;","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () =>\n    <div className = \"footer\">  &copy; 2019 Esin Gokgoz. All Rights Reserved.</div>\n\nexport default Footer;","import React from \"react\";\n\nconst Alert = props => (\n    <div \n        role = \"alert\"\n        className = {`alert alert-${props.type} fade in `}\n        style = {{ width: \"%80\", margin: \"0 auto\", marginTop: 18, ...props.style}}>\n\n            \"You win!\"\n    </div>\n);\n\nexport default Alert;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Flower from './components/Flower';\nimport Container from './components/Container';\nimport Col from './components/Col';\nimport Row from './components/Row';\nimport Footer from './components/Footer';\nimport Alert from './components/Alert';\nimport './App.css';\nimport flowers from './flower.json';\n\nclass App extends Component {\n  state = {\n    flowers: flowers,\n    statement: '',\n    score: 0,\n    topScore: 0,\n    clicked: []\n  }\n\n  handleOnClick = id => {\n    //check to see if id of the clicked img is already in the clicked array, if not, add it to the array\n    if (!this.state.clicked.includes(id)) {\n      this.setState({ clicked: this.state.clicked.concat(id) })\n\n      const updatedScore = this.state.score + 1\n      this.setState({\n        score: updatedScore,\n        statement: \"Wooohoo, that's correct!\"\n      })\n\n      //update topScore\n      if (updatedScore >= this.state.topScore) {\n        this.setState({ topScore: updatedScore })\n      }\n\n      //if score is max (12), show message and then reset values\n      if (updatedScore === 12) {\n        this.setState({\n          flowers,\n          statement: 'Congrats! You won!',\n          score: 0,\n          clicked: []\n        })\n      }\n      //sort the flowers randomly\n      this.setState({ flowers: this.state.flowers.sort(function (a, b) { return 0.5 - Math.random() }) })\n    } else {\n      //if the guess is incorrect, reset the values\n      this.setState({\n        flowers,\n        statement: \"uh oh! That was incorrect!\",\n        score: 0,\n        clicked: []\n      })\n      this.setState({ flowers: this.state.flowers.sort(function (a, b) { return 0.5 - Math.random() }) })\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Header\n          statement={this.state.statement}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Container>\n          <Row>\n            {this.state.flowers.map(flowers => (\n              <Col size=\"md-3\" key={flowers.id} >\n                <Flower\n                  id={flowers.id}\n                  image={flowers.image}\n                  handleOnClick={this.handleOnClick} />\n              </Col>\n            ))}\n          </Row>\n        </Container>\n        <Alert\n          type=\"success\"\n          style={{ opacity: this.state.topScore === 12 ? 1 : 0, marginBottom: 10 }}\n        >\n          <h1 style={{ textAlign: \"center\" }}> {this.statement} </h1>\n\n        </Alert>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}